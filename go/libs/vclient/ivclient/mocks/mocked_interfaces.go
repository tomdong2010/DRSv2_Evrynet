// Code generated by MockGen. DO NOT EDIT.
// Source: ./libs/vclient/ivclient/vclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	vclient "github.com/velo-protocol/DRSv2_Evrynet/go/libs/vclient"
	reflect "reflect"
)

// MockVClient is a mock of VClient interface
type MockVClient struct {
	ctrl     *gomock.Controller
	recorder *MockVClientMockRecorder
}

// MockVClientMockRecorder is the mock recorder for MockVClient
type MockVClientMockRecorder struct {
	mock *MockVClient
}

// NewMockVClient creates a new mock instance
func NewMockVClient(ctrl *gomock.Controller) *MockVClient {
	mock := &MockVClient{ctrl: ctrl}
	mock.recorder = &MockVClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVClient) EXPECT() *MockVClientMockRecorder {
	return m.recorder
}

// SetupCredit mocks base method
func (m *MockVClient) SetupCredit(ctx context.Context, input *vclient.SetupCreditInput) (*vclient.SetupCreditOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupCredit", ctx, input)
	ret0, _ := ret[0].(*vclient.SetupCreditOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupCredit indicates an expected call of SetupCredit
func (mr *MockVClientMockRecorder) SetupCredit(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupCredit", reflect.TypeOf((*MockVClient)(nil).SetupCredit), ctx, input)
}

// MintFromCollateralAmount mocks base method
func (m *MockVClient) MintFromCollateralAmount(ctx context.Context, input *vclient.MintFromCollateralAmountInput) (*vclient.MintFromCollateralAmountCreditOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintFromCollateralAmount", ctx, input)
	ret0, _ := ret[0].(*vclient.MintFromCollateralAmountCreditOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintFromCollateralAmount indicates an expected call of MintFromCollateralAmount
func (mr *MockVClientMockRecorder) MintFromCollateralAmount(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintFromCollateralAmount", reflect.TypeOf((*MockVClient)(nil).MintFromCollateralAmount), ctx, input)
}

// MintFromStableCreditAmount mocks base method
func (m *MockVClient) MintFromStableCreditAmount(ctx context.Context, input *vclient.MintFromStableCreditAmountInput) (*vclient.MintFromStableCreditAmountCreditOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintFromStableCreditAmount", ctx, input)
	ret0, _ := ret[0].(*vclient.MintFromStableCreditAmountCreditOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintFromStableCreditAmount indicates an expected call of MintFromStableCreditAmount
func (mr *MockVClientMockRecorder) MintFromStableCreditAmount(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintFromStableCreditAmount", reflect.TypeOf((*MockVClient)(nil).MintFromStableCreditAmount), ctx, input)
}

// RedeemStableCredit mocks base method
func (m *MockVClient) RedeemStableCredit(ctx context.Context, input *vclient.RedeemStableCreditInput) (*vclient.RedeemStableCreditOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemStableCredit", ctx, input)
	ret0, _ := ret[0].(*vclient.RedeemStableCreditOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedeemStableCredit indicates an expected call of RedeemStableCredit
func (mr *MockVClientMockRecorder) RedeemStableCredit(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemStableCredit", reflect.TypeOf((*MockVClient)(nil).RedeemStableCredit), ctx, input)
}

// GetExchangeRate mocks base method
func (m *MockVClient) GetExchangeRate(input *vclient.GetExchangeRateInput) (*vclient.GetExchangeRateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", input)
	ret0, _ := ret[0].(*vclient.GetExchangeRateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate
func (mr *MockVClientMockRecorder) GetExchangeRate(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockVClient)(nil).GetExchangeRate), input)
}

// CollateralHealthCheck mocks base method
func (m *MockVClient) CollateralHealthCheck(input *vclient.CollateralHealthCheckInput) ([]vclient.CollateralHealthCheckOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollateralHealthCheck", input)
	ret0, _ := ret[0].([]vclient.CollateralHealthCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollateralHealthCheck indicates an expected call of CollateralHealthCheck
func (mr *MockVClientMockRecorder) CollateralHealthCheck(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollateralHealthCheck", reflect.TypeOf((*MockVClient)(nil).CollateralHealthCheck), input)
}

// Rebalance mocks base method
func (m *MockVClient) Rebalance(ctx context.Context, input *vclient.RebalanceInput) (*vclient.RebalanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebalance", ctx, input)
	ret0, _ := ret[0].(*vclient.RebalanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rebalance indicates an expected call of Rebalance
func (mr *MockVClientMockRecorder) Rebalance(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebalance", reflect.TypeOf((*MockVClient)(nil).Rebalance), ctx, input)
}
